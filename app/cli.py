import sys, argparse, base64, types
SOURCES = {
    "_catalog_cols": "ZGVmIHBpY2tfdGl0bGUocm93KToKICAgIGZvciBrIGluIFsidGl0bGUiLCJuYW1lIiwibW9kZWwiLCLQndCw0LjQvNC10L3QvtCy0LDQvdC40LUiLCLQvdCw0LjQvNC10L3QvtCy0LDQvdC40LUiLCLQndCw0LfQstCw0L3QuNC1Iiwi0LzQvtC00LXQu9GMIl06CiAgICAgICAgaWYgayBpbiByb3cgYW5kIHN0cihyb3dba10pLnN0cmlwKCk6IHJldHVybiBzdHIocm93W2tdKS5zdHJpcCgpCiAgICByZXR1cm4gItCc0L7QtNC10LvRjCIKZGVmIHBpY2tfcHJpY2Uocm93KToKICAgIGZvciBrIGluIFsicHJpY2UiLCLRhtC10L3QsCIsItCm0LXQvdCwIiwi0YHRgtC+0LjQvNC+0YHRgtGMIiwiY29zdCIsInByaWNlX3RvdGFsIl06CiAgICAgICAgaWYgayBpbiByb3cgYW5kIHN0cihyb3dba10pLnN0cmlwKCk6CiAgICAgICAgICAgIHY9c3RyKHJvd1trXSkucmVwbGFjZSgiICIsIiIpLnJlcGxhY2UoIiwiLCIuIikKICAgICAgICAgICAgdHJ5OiByZXR1cm4gZiJ7ZmxvYXQodik6LjBmfSIKICAgICAgICAgICAgZXhjZXB0OiByZXR1cm4gcm93W2tdCiAgICByZXR1cm4gIuKAlCIK",
    "_schema_detect": "aW1wb3J0IHBzeWNvcGcKCmRlZiBkZXRlY3RfbWVzc2FnZV9jb2xzKGNvbm4pOgogICAgd2l0aCBjb25uLmN1cnNvcigpIGFzIGN1cjoKICAgICAgICBjdXIuZXhlY3V0ZSgiIiIKICAgICAgICAgIFNFTEVDVCBjb2x1bW5fbmFtZSwgZGF0YV90eXBlCiAgICAgICAgICBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zCiAgICAgICAgICBXSEVSRSB0YWJsZV9uYW1lPSdtZXNzYWdlcycKICAgICAgICAiIiIpCiAgICAgICAgY29scyA9IHtuYW1lOiBkdHlwZSBmb3IgbmFtZSwgZHR5cGUgaW4gY3VyLmZldGNoYWxsKCl9CiAgICAjINC+0YHQvdC+0LLQvdGL0LUg0L/QvtC70Y8KICAgIGxlYWQgID0gbmV4dCgoYyBmb3IgYyBpbiAoImxlYWRfaWQiLCJsZWFkIiwiY29udmVyc2F0aW9uX2lkIiwiY2hhdF9pZCIpIGlmIGMgaW4gY29scyksIE5vbmUpCiAgICB0cyAgICA9IG5leHQoKGMgZm9yIGMgaW4gKCJ0cyIsImNyZWF0ZWRfYXQiLCJkYXRldGltZSIsInRpbWUiLCJkYXRlIiwiYXQiLCJpbnNlcnRlZF9hdCIpIGlmIGMgaW4gY29scyksIE5vbmUpCiAgICBpbmMgICA9IG5leHQoKGMgZm9yIGMgaW4gKCJpbmNvbWluZyIsImlzX2luY29taW5nIiwiZGlyZWN0aW9uIikgaWYgYyBpbiBjb2xzKSwgTm9uZSkKICAgIHRleHQgID0gbmV4dCgoYyBmb3IgYyBpbiAoInRleHQiLCJtZXNzYWdlIiwiYm9keSIsImNvbnRlbnQiKSBpZiBjIGluIGNvbHMpLCBOb25lKQogICAgaWYgbm90IChsZWFkIGFuZCB0cyBhbmQgaW5jIGFuZCB0ZXh0KToKICAgICAgICByYWlzZSBSdW50aW1lRXJyb3IoZiJtZXNzYWdlczogbmVlZCBsZWFkL3RzL2luY29taW5nL3RleHQsIGdvdCBsZWFkPXtsZWFkfSB0cz17dHN9IGluY29taW5nPXtpbmN9IHRleHQ9e3RleHR9IikKICAgIGR0eXBlID0gY29sc1tpbmNdLmxvd2VyKCkKICAgIGlmIGluYyBpbiAoImluY29taW5nIiwiaXNfaW5jb21pbmciKSBvciAiYm9vbGVhbiIgaW4gZHR5cGU6CiAgICAgICAgaW5jX2V4cHIgPSBmIntpbmN9ID0gdHJ1ZSIKICAgIGVsaWYgImNoYXIiIGluIGR0eXBlIG9yICJ0ZXh0IiBpbiBkdHlwZSBvciAiY2l0ZXh0IiBpbiBkdHlwZToKICAgICAgICBpbmNfZXhwciA9IGYibG93ZXIoY29hbGVzY2Uoe2luY30sJycpKSBpbiAoJ2luJywnaW5jb21pbmcnLCdjbGllbnQnLCdmcm9tX2NsaWVudCcpIgogICAgZWxpZiBhbnkoayBpbiBkdHlwZSBmb3IgayBpbiAoInNtYWxsaW50IiwiaW50ZWdlciIsImJpZ2ludCIsIm51bWVyaWMiLCJkZWNpbWFsIikpOgogICAgICAgIGluY19leHByID0gZiJjb2FsZXNjZShjYXN0KHtpbmN9IGFzIHRleHQpLCcnKSBpbiAoJzEnLCdpbicsJ2luY29taW5nJywnY2xpZW50JywnZnJvbV9jbGllbnQnKSIKICAgIGVsc2U6CiAgICAgICAgaW5jX2V4cHIgPSBmImNvYWxlc2NlKGNhc3Qoe2luY30gYXMgdGV4dCksJycpIGluICgnaW4nLCdpbmNvbWluZycsJ2NsaWVudCcsJ2Zyb21fY2xpZW50JywnMScpIgogICAgcmV0dXJuIGxlYWQsIHRzLCBpbmNfZXhwciwgdGV4dAo=",
    "dlq_alert": "aW1wb3J0IG9zLCBqc29uLCB0aW1lLCByZWRpcywgdXJsbGliLnJlcXVlc3QKcj1yZWRpcy5SZWRpcy5mcm9tX3VybChvcy5nZXRlbnYoIlJFRElTX1VSTCIsInJlZGlzOi8vcmVkaXM6NjM3OS8wIiksIGRlY29kZV9yZXNwb25zZXM9VHJ1ZSkKQk9UPW9zLmdldGVudigiVEdfQk9UX1RPS0VOIiwiIikKQ0hBVD1vcy5nZXRlbnYoIlRHX0NIQVRfSUQiLCIiKQppZiBub3QgQk9UIG9yIG5vdCBDSEFUOgogICAgcHJpbnQoanNvbi5kdW1wcyh7Im9rIjpGYWxzZSwicmVhc29uIjoiVEcgZW52IG5vdCBzZXQifSkpOyByYWlzZSBTeXN0ZW1FeGl0Cm1zZz0iIgpjb3VudD0wCndoaWxlIFRydWU6CiAgICBpdG09ci5scG9wKCJtZXNzYWdlX2RscSIpCiAgICBpZiBub3QgaXRtOiBicmVhawogICAgY291bnQrPTEKICAgIGo9anNvbi5sb2FkcyhpdG0pCiAgICBtc2crPSJETFEgb3V0Ym94X2lkPXtvdXRib3hfaWR9IGxlYWQ9e2xlYWRfaWR9XG4iLmZvcm1hdCgqKmopCmlmIGNvdW50OgogICAgZGF0YT1qc29uLmR1bXBzKHsiY2hhdF9pZCI6Q0hBVCwidGV4dCI6bXNnfSkuZW5jb2RlKCJ1dGYtOCIpCiAgICB1cmw9ZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e0JPVH0vc2VuZE1lc3NhZ2UiCiAgICByZXE9dXJsbGliLnJlcXVlc3QuUmVxdWVzdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9eyJDb250ZW50LVR5cGUiOiJhcHBsaWNhdGlvbi9qc29uIn0pCiAgICB3aXRoIHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ocmVxKSBhcyByZXNwOiByZXNwLnJlYWQoKQpwcmludChqc29uLmR1bXBzKHsib2siOlRydWUsImRscSI6Y291bnR9KSkK",
    "fu_tick": "",
    "metrics_push": "aW1wb3J0IG9zLCBqc29uLCB1cmxsaWIucmVxdWVzdCwgZGF0ZXRpbWUgYXMgZHQKaW1wb3J0IHBzeWNvcGcsIHJlZGlzCgpEQj1vcy5nZXRlbnYoIkRBVEFCQVNFX1VSTCIpIG9yIG9zLmdldGVudigiUE9TVEdSRVNfVVJMIikgb3IgInBvc3RncmVzcWw6Ly9wb3N0Z3Jlczpwb3N0Z3Jlc0Bwb3N0Z3Jlczo1NDMyL3Bvc3RncmVzIgpSRURJU19VUkw9b3MuZ2V0ZW52KCJSRURJU19VUkwiLCJyZWRpczovL3JlZGlzOjYzNzkvMCIpClBHVz1vcy5nZXRlbnYoIlBVU0hHQVRFV0FZX1VSTCIsImh0dHA6Ly9wdXNoZ2F0ZXdheTo5MDkxIikKCnI9cmVkaXMuUmVkaXMuZnJvbV91cmwoUkVESVNfVVJMLCBkZWNvZGVfcmVzcG9uc2VzPVRydWUpCgpkZWYgdG9kYXlfYm91bmRzKCk6CiAgICBkMD1kdC5kYXRldGltZS51dGNub3coKS5kYXRlKCk7IGQxPWQwK2R0LnRpbWVkZWx0YShkYXlzPTEpOyByZXR1cm4gZDAsZDEKCmRlZiBjb2xzKGN1cik6CiAgICBjdXIuZXhlY3V0ZSgic2VsZWN0IGNvbHVtbl9uYW1lLGRhdGFfdHlwZSBmcm9tIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zIHdoZXJlIHRhYmxlX25hbWU9J21lc3NhZ2VzJyIpCiAgICByZXR1cm4ge246dCBmb3Igbix0IGluIGN1ci5mZXRjaGFsbCgpfQoKZGVmIGRpc2NvdmVyKGN1cik6CiAgICBjPWNvbHMoY3VyKQogICAgbGVhZD1uZXh0KCh4IGZvciB4IGluICgibGVhZF9pZCIsImxlYWQiLCJjb252ZXJzYXRpb25faWQiLCJjaGF0X2lkIikgaWYgeCBpbiBjKSwgTm9uZSkKICAgIHRzICA9bmV4dCgoeCBmb3IgeCBpbiAoInRzIiwiY3JlYXRlZF9hdCIsImRhdGV0aW1lIiwidGltZSIsImRhdGUiLCJhdCIsImluc2VydGVkX2F0IikgaWYgeCBpbiBjKSwgTm9uZSkKICAgIGluYyA9bmV4dCgoeCBmb3IgeCBpbiAoImluY29taW5nIiwiaXNfaW5jb21pbmciKSBpZiB4IGluIGMpLCBOb25lKQogICAgZGlyZT0iZGlyZWN0aW9uIiBpZiAiZGlyZWN0aW9uIiBpbiBjIGVsc2UgTm9uZQogICAgaWYgbm90IChsZWFkIGFuZCB0cyBhbmQgKGluYyBvciBkaXJlKSk6IHJhaXNlIFJ1bnRpbWVFcnJvcigibWVzc2FnZXMgc2NoZW1hIG5vdCByZWNvZ25pemVkIikKICAgIGRlZiBleHByKGNvbCk6CiAgICAgICAgdD1jW2NvbF0KICAgICAgICBpZiB0PT0iYm9vbGVhbiI6IHJldHVybiBmJyJ7Y29sfSI9dHJ1ZScsIGYnIntjb2x9Ij1mYWxzZScKICAgICAgICBpZiB0IGluICgic21hbGxpbnQiLCJpbnRlZ2VyIiwiYmlnaW50IiwibnVtZXJpYyIpOiByZXR1cm4gZicie2NvbH0iPTEnLCBmJyJ7Y29sfSI9MCcKICAgICAgICByZXR1cm4gKGYibG93ZXIoY29hbGVzY2UoXCJ7Y29sfVwiOjp0ZXh0LCcnKSkgaW4gKCdpbicsJ2luY29taW5nJywnY2xpZW50JywnZnJvbV9jbGllbnQnKSIsCiAgICAgICAgICAgICAgICBmImxvd2VyKGNvYWxlc2NlKFwie2NvbH1cIjo6dGV4dCwnJykpIGluICgnb3V0Jywnb3V0Z29pbmcnLCdhZ2VudCcsJ3RvX2NsaWVudCcpIikKICAgIGluY19leHByLG91dF9leHByID0gZXhwcihpbmMpIGlmIGluYyBlbHNlIGV4cHIoZGlyZSkKICAgIHJldHVybiB7ImxlYWQiOmxlYWQsInRzIjp0cywiaW5jX2V4cHIiOmluY19leHByLCJvdXRfZXhwciI6b3V0X2V4cHJ9CgpkZWYgcTEoY3VyLCBzcWwsICphcmdzKToKICAgIGN1ci5leGVjdXRlKHNxbCwgYXJncyk7IHY9Y3VyLmZldGNob25lKCk7IHJldHVybiAodlswXSBvciAwKSBpZiB2IGVsc2UgMAoKZDAsZDE9dG9kYXlfYm91bmRzKCkKd2l0aCBwc3ljb3BnLmNvbm5lY3QoREIpIGFzIGNvbm46CiAgICBjdXI9Y29ubi5jdXJzb3IoKQogICAgbT1kaXNjb3ZlcihjdXIpCiAgICBsZWFkLHRzLGluY19leHByLG91dF9leHByPW1bImxlYWQiXSxtWyJ0cyJdLG1bImluY19leHByIl0sbVsib3V0X2V4cHIiXQogICAgbGVhZHMgICA9IHExKGN1ciwgZidTRUxFQ1QgY291bnQoRElTVElOQ1QgIntsZWFkfSIpIEZST00gbWVzc2FnZXMgV0hFUkUgInt0c30iID49ICVzIEFORCAie3RzfSIgPCAlcycsIGQwLGQxKQogICAgcmVwbGllZCA9IHExKGN1ciwgZiIiIgogICAgICAgIFdJVEggeCBBUyAoCiAgICAgICAgICBTRUxFQ1QgIntsZWFkfSIgQVMgbGVhZF9pZCwKICAgICAgICAgICAgICAgICBNQVgoQ0FTRSBXSEVOIHtpbmNfZXhwcn0gVEhFTiAxIEVMU0UgMCBFTkQpIGhhc19pbiwKICAgICAgICAgICAgICAgICBNQVgoQ0FTRSBXSEVOIHtvdXRfZXhwcn0gVEhFTiAxIEVMU0UgMCBFTkQpIGhhc19vdXQKICAgICAgICAgIEZST00gbWVzc2FnZXMKICAgICAgICAgIFdIRVJFICJ7dHN9IiA+PSAlcyBBTkQgInt0c30iIDwgJXMKICAgICAgICAgIEdST1VQIEJZICJ7bGVhZH0iCiAgICAgICAgKQogICAgICAgIFNFTEVDVCBjb3VudCgqKSBGUk9NIHggV0hFUkUgaGFzX2luPTEgQU5EIGhhc19vdXQ9MQogICAgIiIiLCBkMCxkMSkKICAgIHRyeTogICAgYWJfdHJpYWxzID0gcTEoY3VyLCAiU0VMRUNUIGNvdW50KCopIEZST00gYWJfZGVjaXNpb25zIFdIRVJFIGRlY2lkZWRfYXQgPj0gJXMgQU5EIGRlY2lkZWRfYXQgPCAlcyIsIGQwLGQxKQogICAgZXhjZXB0OiBhYl90cmlhbHMgPSAwCiAgICB0cnk6ICAgIGFiX3N1Y2MgICA9IHExKGN1ciwgIlNFTEVDVCBjb3VudCgqKSBGUk9NIGFiX291dGNvbWVzICBXSEVSRSB0cyA+PSAlcyBBTkQgdHMgPCAlcyIsIGQwLGQxKQogICAgZXhjZXB0OiBhYl9zdWNjICAgPSAwCgpyZXBseV9yYXRlID0gKHJlcGxpZWQvbGVhZHMqMTAwLjApIGlmIGxlYWRzIGVsc2UgMC4wCmFiX2N2ciAgICAgPSAoYWJfc3VjYy9hYl90cmlhbHMqMTAwLjApIGlmIGFiX3RyaWFscyBlbHNlIDAuMApxdWV1ZV9kZXB0aCA9IGludChyLmxsZW4oIm1lc3NhZ2VfcXVldWUiKSBvciAwKQpkbHFfZGVwdGggICA9IGludChyLmxsZW4oIm1lc3NhZ2VfZGxxIikgb3IgMCkKCiMg0L/RgNC+0YHRgtGL0LUg0YHRgtGA0L7QutC4INC80LXRgtGA0LjQuiDQsdC10LcgSEVMUC9UWVBFCmxpbmVzID0gWwogICAgZiJhdmlvX2xlYWRzX3RvZGF5IHtsZWFkc30iLAogICAgZiJhdmlvX3JlcGxpZXNfdG9kYXkge3JlcGxpZWR9IiwKICAgIGYiYXZpb19yZXBseV9yYXRlX3BlcmNlbnQge3JvdW5kKHJlcGx5X3JhdGUsMil9IiwKICAgIGYiYXZpb19hYl90cmlhbHNfdG9kYXkge2FiX3RyaWFsc30iLAogICAgZiJhdmlvX2FiX3N1Y2Nlc3NfdG9kYXkge2FiX3N1Y2N9IiwKICAgIGYiYXZpb19hYl9jdnJfcGVyY2VudCB7cm91bmQoYWJfY3ZyLDIpfSIsCiAgICBmImF2aW9fcXVldWVfZGVwdGgge3F1ZXVlX2RlcHRofSIsCiAgICBmImF2aW9fZGxxX2RlcHRoIHtkbHFfZGVwdGh9IiwKXQpib2R5ID0gKCJcbiIuam9pbihsaW5lcykgKyAiXG4iKS5lbmNvZGUoInV0Zi04IikKCnVybCA9IGYie1BHV30vbWV0cmljcy9qb2IvYXZpb19ib3QvaW5zdGFuY2UvYXBwIiAgIyDQsdC10LcgaW5zdGFuY2UKcmVxID0gdXJsbGliLnJlcXVlc3QuUmVxdWVzdCh1cmwsIGRhdGE9Ym9keSwgaGVhZGVycz17IkNvbnRlbnQtVHlwZSI6InRleHQvcGxhaW4ifSwgbWV0aG9kPSJQVVQiKQp3aXRoIHVybGxpYi5yZXF1ZXN0LnVybG9wZW4ocmVxKSBhcyByZXNwOgogICAgcmVzcC5yZWFkKCkKCnByaW50KGpzb24uZHVtcHMoeyJvayI6VHJ1ZSwibGVhZHMiOmxlYWRzLCJyZXBseV9yYXRlIjpyb3VuZChyZXBseV9yYXRlLDEpLCJxdWV1ZSI6cXVldWVfZGVwdGgsImRscSI6ZGxxX2RlcHRofSkpCg==",
    "objection_tick": "aW1wb3J0IG9zLCByZSwganNvbiwgeWFtbCwgZGF0ZXRpbWUgYXMgZHQKaW1wb3J0IHJlZGlzLCBwc3ljb3BnLCBzeXMKc3lzLnBhdGguaW5zZXJ0KDAsIG9zLnBhdGguZGlybmFtZShfX2ZpbGVfXykpCmZyb20gX3NjaGVtYV9kZXRlY3QgaW1wb3J0IGRldGVjdF9tZXNzYWdlX2NvbHMKClJPT1Q9Ii9hcHAiCkRCPW9zLmdldGVudigiREFUQUJBU0VfVVJMIikgb3Igb3MuZ2V0ZW52KCJQT1NUR1JFU19VUkwiKSBvciAicG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzQGRiOjU0MzIvcG9zdGdyZXMiClJFRElTX1VSTD1vcy5nZXRlbnYoIlJFRElTX1VSTCIsInJlZGlzOi8vcmVkaXM6NjM3OS8wIikKUVVFVUU9b3MuZ2V0ZW52KCJPVVRCT1hfUVVFVUUiLCJtZXNzYWdlX3F1ZXVlIikKQ0ZHPW9zLnBhdGguam9pbihST09ULCJwcm9tcHRzIiwib2JqZWN0aW9ucy55bWwiKQoKciA9IHJlZGlzLlJlZGlzLmZyb21fdXJsKFJFRElTX1VSTCwgZGVjb2RlX3Jlc3BvbnNlcz1UcnVlKQpjZmcgPSB5YW1sLnNhZmVfbG9hZChvcGVuKENGRywgZW5jb2Rpbmc9InV0Zi04IikpCnBhdHMgPSB7azpbcmUuY29tcGlsZSh4LHJlLkkpIGZvciB4IGluIHZdIGZvciBrLHYgaW4gKGNmZy5nZXQoInBhdHRlcm5zIikgb3Ige30pLml0ZW1zKCl9CnJlcGxpZXMgPSBjZmcuZ2V0KCJyZXBsaWVzIikgb3Ige30KCmRlZiBkdWVfa2V5KGxlYWQpOiByZXR1cm4gZiJvYmo6bGFzdDp7bGVhZH0iCgpzZW50PTAKd2l0aCBwc3ljb3BnLmNvbm5lY3QoREIpIGFzIGNvbm46CiAgICBsZWFkX2NvbCwgdHNfY29sLCBpbmNfZXhwciwgdGV4dF9jb2wgPSBkZXRlY3RfbWVzc2FnZV9jb2xzKGNvbm4pCiAgICB3aXRoIGNvbm4uY3Vyc29yKCkgYXMgY3VyOgogICAgICAgIGN1ci5leGVjdXRlKGYiIiIKICAgICAgICAgICAgU0VMRUNUIERJU1RJTkNUIE9OICh7bGVhZF9jb2x9KSB7bGVhZF9jb2x9LCB7dGV4dF9jb2x9CiAgICAgICAgICAgIEZST00gbWVzc2FnZXMKICAgICAgICAgICAgV0hFUkUgKHtpbmNfZXhwcn0pIEFORCB7dHNfY29sfSA+IE5PVygpIC0gSU5URVJWQUwgJzEwIG1pbnV0ZXMnCiAgICAgICAgICAgIE9SREVSIEJZIHtsZWFkX2NvbH0sIHt0c19jb2x9IERFU0MKICAgICAgICAiIiIpCiAgICAgICAgcm93cz1jdXIuZmV0Y2hhbGwoKQoKZm9yIGxlYWQsIHRleHQgaW4gcm93czoKICAgIGxhc3Q9aW50KHIuZ2V0KGR1ZV9rZXkobGVhZCkpIG9yIDApCiAgICBpZiBsYXN0IGFuZCAoZHQuZGF0ZXRpbWUudXRjbm93KCkudGltZXN0YW1wKCktbGFzdCkgPCA2MDA6CiAgICAgICAgY29udGludWUKICAgIHQgPSB0ZXh0IG9yICIiCiAgICBjYXQ9Tm9uZQogICAgZm9yIGsscnMgaW4gcGF0cy5pdGVtcygpOgogICAgICAgIGlmIGFueShyZy5zZWFyY2godCkgZm9yIHJnIGluIHJzKToKICAgICAgICAgICAgY2F0PWs7IGJyZWFrCiAgICBpZiBub3QgY2F0OiAKICAgICAgICBjb250aW51ZQogICAgdmFyaWFudHMgPSByZXBsaWVzLmdldChjYXQpIG9yIFtdCiAgICBpZiBub3QgdmFyaWFudHM6IAogICAgICAgIGNvbnRpbnVlCiAgICBtc2cgPSB2YXJpYW50c1swXQogICAgam9iPXsidHlwZSI6InNlbmQiLCJraW5kIjoib2JqZWN0aW9uIiwibGVhZF9pZCI6aW50KGxlYWQpLCJ0ZXh0Ijptc2csImFiX2FybSI6ImZhYl9jb3VudGVyIn0KICAgIHIucnB1c2goUVVFVUUsIGpzb24uZHVtcHMoam9iKSkKICAgIHIuc2V0KGR1ZV9rZXkobGVhZCksIGludChkdC5kYXRldGltZS51dGNub3coKS50aW1lc3RhbXAoKSksIGV4PTM2MDApCiAgICBzZW50Kz0xCgpwcmludChqc29uLmR1bXBzKHsib2siOiBUcnVlLCAic2VudCI6IHNlbnR9KSkK",
    "offer_tick": "aW1wb3J0IG9zLCByZSwgY3N2LCBqc29uLCBkYXRldGltZSBhcyBkdCwgc3lzLCByZWRpcywgcHN5Y29wZywgeWFtbApzeXMucGF0aC5pbnNlcnQoMCwgb3MucGF0aC5kaXJuYW1lKF9fZmlsZV9fKSkKZnJvbSBfc2NoZW1hX2RldGVjdCBpbXBvcnQgZGV0ZWN0X21lc3NhZ2VfY29scwpmcm9tIF9jYXRhbG9nX2NvbHMgaW1wb3J0IHBpY2tfdGl0bGUsIHBpY2tfcHJpY2UKClJPT1Q9Ii9hcHAiCkRCPW9zLmdldGVudigiREFUQUJBU0VfVVJMIikgb3Igb3MuZ2V0ZW52KCJQT1NUR1JFU19VUkwiKSBvciAicG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzQGRiOjU0MzIvcG9zdGdyZXMiClJFRElTX1VSTD1vcy5nZXRlbnYoIlJFRElTX1VSTCIsInJlZGlzOi8vcmVkaXM6NjM3OS8wIikKUVVFVUU9b3MuZ2V0ZW52KCJPVVRCT1hfUVVFVUUiLCJtZXNzYWdlX3F1ZXVlIikKQ0ZHPW9zLnBhdGguam9pbihST09ULCJjb25maWciLCJvZmZlcl9wYWNrLnlhbWwiKQpDQVQ9b3MucGF0aC5qb2luKFJPT1QsImRhdGEiLCJjYXRhbG9nX2Rvb3JzLmNzdiIpCgpjZmcgPSB5YW1sLnNhZmVfbG9hZChvcGVuKENGRywgZW5jb2Rpbmc9InV0Zi04IikpIGlmIG9zLnBhdGguaXNmaWxlKENGRykgZWxzZSB7ImVuYWJsZWQiOkZhbHNlfQppZiBub3QgY2ZnLmdldCgiZW5hYmxlZCIsIFRydWUpOgogICAgcHJpbnQoanNvbi5kdW1wcyh7Im9rIjogVHJ1ZSwgInNlbnQiOiAwLCAicmVhc29uIjogImRpc2FibGVkIn0pKTsgcmFpc2UgU3lzdGVtRXhpdAoKciA9IHJlZGlzLlJlZGlzLmZyb21fdXJsKFJFRElTX1VSTCwgZGVjb2RlX3Jlc3BvbnNlcz1UcnVlKQpkZWYgdG9kYXlfa2V5KGxlYWQpOiByZXR1cm4gZiJvZmZlcjpzZW50OntsZWFkfTp7ZHQuZGF0ZS50b2RheSgpOiVZJW0lZH0iClRyaWc9W3JlLmNvbXBpbGUoayxyZS5JKSBmb3IgayBpbiBjZmdbInJ1bGVzIl1bInRyaWdnZXJfa2V5d29yZHMiXV0KTWF4UGVyRGF5PWludChjZmdbInJ1bGVzIl0uZ2V0KCJtYXhfcGVyX2xlYWRfcGVyX2RheSIsMikpCgojINC60LDRgtCw0LvQvtCzCml0ZW1zPVtdCmlmIG9zLnBhdGguaXNmaWxlKENBVCk6CiAgICB3aXRoIG9wZW4oQ0FULGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgaXRlbXM9bGlzdChjc3YuRGljdFJlYWRlcihmKSkKCmRlZiBwaWNrMygpOgogICAgIyDRgdC+0YDRgtC40YDRg9C10Lwg0L/QviDRhtC10L3QtTsg0LXRgdC70Lgg0L3QtdGCIOKAlCDQv9C+INC90LDQt9Cy0LDQvdC40Y4KICAgIGRlZiBrZXkocm93KToKICAgICAgICBwcj1waWNrX3ByaWNlKHJvdykKICAgICAgICB0cnk6IHA9ZmxvYXQoc3RyKHByKS5yZXBsYWNlKCIgIiwiIikucmVwbGFjZSgiLCIsIi4iKSkKICAgICAgICBleGNlcHQ6IHA9MWUxMgogICAgICAgIHJldHVybiAocCwgcGlja190aXRsZShyb3cpKQogICAgUz1zb3J0ZWQoaXRlbXMsIGtleT1rZXkpCiAgICByZXR1cm4gW1NbMF0sIFNbbWluKDEsbGVuKFMpLTIpXSwgU1stMV1dIGlmIGxlbihTKT49MyBlbHNlIFMKCmRlZiBidW5kbGVfbGluZXMocGlja3MpOgogICAgdGllcnM9WyLQrdC60L7QvdC+0LzQvdC+Iiwi0J7Qv9GC0LjQvNGD0LwiLCLQn9GA0LXQvNC40YPQvCJdOyBvdXQ9W10KICAgIGZvciBpLHAgaW4gZW51bWVyYXRlKHBpY2tzKToKICAgICAgICBvdXQuYXBwZW5kKGYie3RpZXJzW21pbihpLDIpXX06IHtwaWNrX3RpdGxlKHApfSDigJQge3BpY2tfcHJpY2UocCl9IOKCvSIpCiAgICByZXR1cm4gb3V0CgpzZW50PTAKd2l0aCBwc3ljb3BnLmNvbm5lY3QoREIpIGFzIGNvbm46CiAgICBsZWFkX2NvbCwgdHNfY29sLCBpbmNfZXhwciwgdGV4dF9jb2wgPSBkZXRlY3RfbWVzc2FnZV9jb2xzKGNvbm4pCiAgICB3aXRoIGNvbm4uY3Vyc29yKCkgYXMgY3VyOgogICAgICAgIGN1ci5leGVjdXRlKGYiIiIKICAgICAgICAgICAgU0VMRUNUIERJU1RJTkNUIE9OICh7bGVhZF9jb2x9KSB7bGVhZF9jb2x9LCB7dGV4dF9jb2x9CiAgICAgICAgICAgIEZST00gbWVzc2FnZXMKICAgICAgICAgICAgV0hFUkUgKHtpbmNfZXhwcn0pIEFORCB7dHNfY29sfSA+IE5PVygpIC0gSU5URVJWQUwgJzE1IG1pbnV0ZXMnCiAgICAgICAgICAgIE9SREVSIEJZIHtsZWFkX2NvbH0sIHt0c19jb2x9IERFU0MKICAgICAgICAiIiIpCiAgICAgICAgcm93cz1jdXIuZmV0Y2hhbGwoKQoKZm9yIGxlYWQsIHRleHQgaW4gcm93czoKICAgIGlmIGludChyLmdldCh0b2RheV9rZXkobGVhZCkpIG9yIDApID49IE1heFBlckRheTogCiAgICAgICAgY29udGludWUKICAgIGlmIG5vdCBhbnkocC5zZWFyY2godGV4dCBvciAiIikgZm9yIHAgaW4gVHJpZyk6IAogICAgICAgIGNvbnRpbnVlCiAgICBwaWNrcyA9IHBpY2szKCkKICAgIGlmIG5vdCBwaWNrczogCiAgICAgICAgY29udGludWUKICAgIGxpbmVzID0gYnVuZGxlX2xpbmVzKHBpY2tzKQogICAgY3RhcyA9IFtiLmdldCgiY3RhIiwi0J7RhNC+0YDQvNC40Lw/IikgZm9yIGIgaW4gKGNmZy5nZXQoImJ1bmRsZXMiKSBvciBbXSldCiAgICBtc2cgPSAi0J/RgNC10LTQu9C+0LbRgyAzINCy0LDRgNC40LDQvdGC0LA6XG4tICIgKyAiXG4tICIuam9pbihsaW5lcykgKyAoIlxuIitjdGFzWzBdIGlmIGN0YXMgZWxzZSAiIikKICAgIHIucnB1c2goUVVFVUUsIGpzb24uZHVtcHMoeyJ0eXBlIjoic2VuZCIsImtpbmQiOiJvZmZlciIsImxlYWRfaWQiOmludChsZWFkKSwidGV4dCI6bXNnLCJhYl9hcm0iOiJjdGFfYnVuZGxlIn0pKQogICAgci5pbmNyKHRvZGF5X2tleShsZWFkKSk7IHIuZXhwaXJlKHRvZGF5X2tleShsZWFkKSwgODY0MDApCiAgICBzZW50Kz0xCgpwcmludChqc29uLmR1bXBzKHsib2siOiBUcnVlLCAic2VudCI6IHNlbnR9KSkK",
    "outbox_retry": "aW1wb3J0IG9zLGpzb24sbWF0aCxkYXRldGltZSBhcyBkdAppbXBvcnQgcHN5Y29wZywgcmVkaXMKCkRCPW9zLmdldGVudigiREFUQUJBU0VfVVJMIikgb3Igb3MuZ2V0ZW52KCJQT1NUR1JFU19VUkwiKSBvciAicG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzQGRiOjU0MzIvcG9zdGdyZXMiClJFRElTX1VSTD1vcy5nZXRlbnYoIlJFRElTX1VSTCIsInJlZGlzOi8vcmVkaXM6NjM3OS8wIikKUVVFVUU9b3MuZ2V0ZW52KCJPVVRCT1hfUVVFVUUiLCJtZXNzYWdlX3F1ZXVlIikKTUFYX1JFVFJZPWludChvcy5nZXRlbnYoIk9VVEJPWF9NQVhfUkVUUlkiLCI2IikpCkJBU0VfU0VDPWludChvcy5nZXRlbnYoIk9VVEJPWF9CQVNFX0RFTEFZIiwiMzAiKSkKCmRlZiBmaXJzdChjb2xzLCBvcHRzKToKICAgIGZvciBjIGluIG9wdHM6CiAgICAgICAgaWYgYyBpbiBjb2xzOiByZXR1cm4gYwogICAgcmV0dXJuIE5vbmUKCmRlZiBkZWxheShhdHRlbXB0OmludCktPmludDoKICAgIHJldHVybiBtaW4oMTgwMCwgaW50KEJBU0VfU0VDICogKDIgKiogbWF4KDAsYXR0ZW1wdC0xKSkpKQoKcj1yZWRpcy5SZWRpcy5mcm9tX3VybChSRURJU19VUkwsIGRlY29kZV9yZXNwb25zZXM9VHJ1ZSkKCndpdGggcHN5Y29wZy5jb25uZWN0KERCKSBhcyBjb25uOgogICAgY29ubi5hdXRvY29tbWl0PVRydWUKICAgIGN1cj1jb25uLmN1cnNvcigpCiAgICBjdXIuZXhlY3V0ZSgiU0VMRUNUIGNvbHVtbl9uYW1lIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgV0hFUkUgdGFibGVfc2NoZW1hPSdwdWJsaWMnIEFORCB0YWJsZV9uYW1lPSdvdXRib3gnIikKICAgIGNvbHM9e3JbMF0gZm9yIHIgaW4gY3VyLmZldGNoYWxsKCl9CiAgICBpZiBub3QgY29sczoKICAgICAgICBwcmludChqc29uLmR1bXBzKHsib2siOkZhbHNlLCJyZWFzb24iOiJubyBvdXRib3ggdGFibGUifSkpOyByYWlzZSBTeXN0ZW1FeGl0CgogICAgaWRfY29sICAgID0gZmlyc3QoY29scywgWyJpZCJdKQogICAgbGVhZF9jb2wgID0gZmlyc3QoY29scywgWyJsZWFkX2lkIiwibGVhZCIsImNvbnZlcnNhdGlvbl9pZCIsImNoYXRfaWQiXSkKICAgIHBheWxvYWRfYyA9IGZpcnN0KGNvbHMsIFsicGF5bG9hZCIsImRhdGEiLCJib2R5IiwibWVzc2FnZSIsImpzb24iLCJ0ZXh0Il0pCiAgICBzdGF0dXNfYyAgPSBmaXJzdChjb2xzLCBbInN0YXR1cyJdKQogICAgcmV0cnlfYyAgID0gZmlyc3QoY29scywgWyJyZXRyeV9jb3VudCIsImF0dGVtcHRzIl0pCiAgICBuZXh0X2MgICAgPSBmaXJzdChjb2xzLCBbIm5leHRfcmV0cnlfYXQiXSkKICAgIHNlbnRfYXRfYyA9IGZpcnN0KGNvbHMsIFsic2VudF9hdCJdKQogICAgaWYgbm90IChpZF9jb2wgYW5kIGxlYWRfY29sIGFuZCBwYXlsb2FkX2MpOgogICAgICAgIHByaW50KGpzb24uZHVtcHMoeyJvayI6RmFsc2UsInJlYXNvbiI6Im91dGJveCBjb2x1bW5zIG1pc3NpbmciLCJoYXZlIjpsaXN0KGNvbHMpfSkpOyByYWlzZSBTeXN0ZW1FeGl0CgogICAgd2hlcmU9IjE9MSIKICAgIGlmIHN0YXR1c19jOiB3aGVyZSs9ZiIgQU5EIENPQUxFU0NFKHtzdGF0dXNfY30sJycpIElOICgnZmFpbGVkJywnJykiCiAgICBpZiBuZXh0X2M6ICAgd2hlcmUrPWYiIEFORCAoIHtuZXh0X2N9IElTIE5VTEwgT1Ige25leHRfY30gPD0gTk9XKCkgKSIKICAgIGlmIHNlbnRfYXRfYzp3aGVyZSs9ZiIgQU5EIHtzZW50X2F0X2N9IElTIE5VTEwiCgogICAgcT1mIlNFTEVDVCB7aWRfY29sfSwge2xlYWRfY29sfSwge3BheWxvYWRfY30gRlJPTSBvdXRib3ggV0hFUkUge3doZXJlfSBPUkRFUiBCWSBDT0FMRVNDRSh7bmV4dF9jfSxOT1coKSkgQVNDIExJTUlUIDIwMCIKICAgIGN1ci5leGVjdXRlKHEpCiAgICByb3dzPWN1ci5mZXRjaGFsbCgpCiAgICByZXRyaWVkPTA7IGRscT0wCiAgICBmb3Igb2lkLCBsZWFkLCBwYXlsb2FkIGluIHJvd3M6CiAgICAgICAgcmM9MAogICAgICAgIGlmIHJldHJ5X2M6CiAgICAgICAgICAgIGN1ci5leGVjdXRlKGYiU0VMRUNUIENPQUxFU0NFKHtyZXRyeV9jfSwwKSBGUk9NIG91dGJveCBXSEVSRSB7aWRfY29sfT0lcyIsKG9pZCwpKQogICAgICAgICAgICByYz1jdXIuZmV0Y2hvbmUoKVswXSBvciAwCiAgICAgICAgaWYgcmMgPj0gTUFYX1JFVFJZOgogICAgICAgICAgICBpZiBzdGF0dXNfYzogY3VyLmV4ZWN1dGUoZiJVUERBVEUgb3V0Ym94IFNFVCB7c3RhdHVzX2N9PSdkbHEnIFdIRVJFIHtpZF9jb2x9PSVzIiwob2lkLCkpCiAgICAgICAgICAgIHIucnB1c2goIm1lc3NhZ2VfZGxxIiwganNvbi5kdW1wcyh7Im91dGJveF9pZCI6b2lkLCJsZWFkX2lkIjpsZWFkLCJwYXlsb2FkIjpwYXlsb2FkfSkpCiAgICAgICAgICAgIGRscSs9MTsgY29udGludWUKICAgICAgICBqb2I9eyJ0eXBlIjoic2VuZCIsImtpbmQiOiJyZXRyeSIsImxlYWRfaWQiOmxlYWQsInBheWxvYWQiOnBheWxvYWQsIm91dGJveF9pZCI6b2lkLCJhdHRlbXB0IjpyYysxfQogICAgICAgIHIucnB1c2goUVVFVUUsIGpzb24uZHVtcHMoam9iKSkKICAgICAgICBzZXRzPVtdOyBwYXJhbXM9W10KICAgICAgICBpZiBzdGF0dXNfYzogc2V0cy5hcHBlbmQoZiJ7c3RhdHVzX2N9PSVzIikgb3IgcGFyYW1zLmFwcGVuZCgicXVldWVkIikKICAgICAgICBpZiByZXRyeV9jOiAgc2V0cy5hcHBlbmQoZiJ7cmV0cnlfY309Q09BTEVTQ0Uoe3JldHJ5X2N9LDApKzEiKQogICAgICAgIGlmIG5leHRfYzoKICAgICAgICAgICAgbnh0PWR0LmRhdGV0aW1lLnV0Y25vdygpK2R0LnRpbWVkZWx0YShzZWNvbmRzPWRlbGF5KHJjKzEpKQogICAgICAgICAgICBzZXRzLmFwcGVuZChmIntuZXh0X2N9PSVzIik7IHBhcmFtcy5hcHBlbmQobnh0KQogICAgICAgIGlmIHNldHM6CiAgICAgICAgICAgIGN1ci5leGVjdXRlKGYiVVBEQVRFIG91dGJveCBTRVQgeycsICcuam9pbihzZXRzKX0gV0hFUkUge2lkX2NvbH09JXMiLCAoKnBhcmFtcywgb2lkKSkKICAgICAgICByZXRyaWVkKz0xCiAgICBwcmludChqc29uLmR1bXBzKHsib2siOlRydWUsInJldHJpZWQiOnJldHJpZWQsImRscSI6ZGxxfSkpCg==",
    "rag_build": "aW1wb3J0IG9zLCBjc3YsIGpzb24sIHNxbGl0ZTMsIGdsb2IKREI9ImRhdGEva25vd2xlZGdlLmRiIgpvcy5tYWtlZGlycygiZGF0YSIsIGV4aXN0X29rPVRydWUpCmNvbj1zcWxpdGUzLmNvbm5lY3QoREIpCmN1cj1jb24uY3Vyc29yKCkKY3VyLmV4ZWN1dGVzY3JpcHQoIiIiClBSQUdNQSBqb3VybmFsX21vZGU9V0FMOwpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBkb2NzKAogIGlkIElOVEVHRVIgUFJJTUFSWSBLRVksCiAga2luZCBURVhULCByZWYgVEVYVCwgdGV4dCBURVhUCik7CkNSRUFURSBWSVJUVUFMIFRBQkxFIElGIE5PVCBFWElTVFMgZG9jc19mdHMgVVNJTkcgZnRzNSh0ZXh0LCBjb250ZW50PSdkb2NzJywgY29udGVudF9yb3dpZD0naWQnKTsKCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIGl0ZW1zKAogIGlkIElOVEVHRVIgUFJJTUFSWSBLRVksCiAgc2t1IFRFWFQsIHRpdGxlIFRFWFQsIHByaWNlIFRFWFQsIHBheWxvYWQgSlNPTgopOwpDUkVBVEUgVklSVFVBTCBUQUJMRSBJRiBOT1QgRVhJU1RTIGl0ZW1zX2Z0cyBVU0lORyBmdHM1KHRpdGxlLCBwYXlsb2FkLCBjb250ZW50PSdpdGVtcycsIGNvbnRlbnRfcm93aWQ9J2lkJyk7CiIiIikKCmRlZiBhZGRfZG9jKGtpbmQsIHJlZiwgdGV4dCk6CiAgY3VyLmV4ZWN1dGUoIklOU0VSVCBJTlRPIGRvY3Moa2luZCxyZWYsdGV4dCkgVkFMVUVTKD8sPyw/KSIsKGtpbmQscmVmLHRleHQpKQogIHJvd2lkPWN1ci5sYXN0cm93aWQKICBjdXIuZXhlY3V0ZSgiSU5TRVJUIElOVE8gZG9jc19mdHMocm93aWQsdGV4dCkgVkFMVUVTKD8sPykiLChyb3dpZCx0ZXh0KSkKCiMgbWFya2Rvd24veWFtbC90eHQg0LIg0LjQvdC00LXQutGBCmZvciBwIGluIGdsb2IuZ2xvYigicHJvbXB0cy8qLm1kIikrZ2xvYi5nbG9iKCJwcm9tcHRzLyoueW1sIikrZ2xvYi5nbG9iKCJwcm9tcHRzLyoueWFtbCIpOgogIHRyeToKICAgIHdpdGggb3BlbihwLCJyIixlbmNvZGluZz0idXRmLTgiKSBhcyBmOgogICAgICBhZGRfZG9jKCJwcm9tcHQiLCBwLCBmLnJlYWQoKSkKICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICBwcmludCgic2tpcCIsIHAsIGUpCgojINC60LDRgtCw0LvQvtCzINC00LLQtdGA0LXQuQpjc3ZfcGF0aD0iZGF0YS9jYXRhbG9nX2Rvb3JzLmNzdiIKaWYgb3MucGF0aC5pc2ZpbGUoY3N2X3BhdGgpOgogIHdpdGggb3Blbihjc3ZfcGF0aCwiciIsZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoKICAgIFI9Y3N2LkRpY3RSZWFkZXIoZikKICAgIGZvciByb3cgaW4gUjoKICAgICAgc2t1PXJvdy5nZXQoInNrdSIpIG9yIHJvdy5nZXQoImFydGljdWwiKSBvciByb3cuZ2V0KCJpZCIpIG9yICIiCiAgICAgIHRpdGxlPXJvdy5nZXQoInRpdGxlIikgb3Igcm93LmdldCgibmFtZSIpIG9yIHJvdy5nZXQoIm1vZGVsIikgb3IgIiIKICAgICAgcHJpY2U9c3RyKHJvdy5nZXQoInByaWNlIikgb3Igcm93LmdldCgi0YbQtdC90LAiKSBvciAiIikKICAgICAgcGF5bG9hZD1qc29uLmR1bXBzKHJvdywgZW5zdXJlX2FzY2lpPUZhbHNlKQogICAgICBjdXIuZXhlY3V0ZSgiSU5TRVJUIElOVE8gaXRlbXMoc2t1LHRpdGxlLHByaWNlLHBheWxvYWQpIFZBTFVFUyg/LD8sPyw/KSIsKHNrdSx0aXRsZSxwcmljZSxwYXlsb2FkKSkKICAgICAgcmlkPWN1ci5sYXN0cm93aWQKICAgICAgY3VyLmV4ZWN1dGUoIklOU0VSVCBJTlRPIGl0ZW1zX2Z0cyhyb3dpZCx0aXRsZSxwYXlsb2FkKSBWQUxVRVMoPyw/LD8pIiwocmlkLHRpdGxlLHBheWxvYWQpKQpjb24uY29tbWl0KCk7IGNvbi5jbG9zZSgpCnByaW50KGpzb24uZHVtcHMoeyJvayI6VHJ1ZSwiZGIiOkRCfSkpCg==",
    "rag_search": "aW1wb3J0IHN5cywganNvbiwgc3FsaXRlMwpxPSIgIi5qb2luKHN5cy5hcmd2WzE6XSkuc3RyaXAoKQppZiBub3QgcTogCiAgICBwcmludCgiW10iKTsgc3lzLmV4aXQoMCkKY29uPXNxbGl0ZTMuY29ubmVjdCgiZGF0YS9rbm93bGVkZ2UuZGIiKTsgY3VyPWNvbi5jdXJzb3IoKQpjdXIuZXhlY3V0ZSgiU0VMRUNUIGkuc2t1LGkudGl0bGUsaS5wcmljZSxpLnBheWxvYWQgRlJPTSBpdGVtcyBpIEpPSU4gaXRlbXNfZnRzIGYgT04gaS5pZD1mLnJvd2lkIFdIRVJFIGYuaXRlbXNfZnRzIE1BVENIID8gTElNSVQgNSIsIChxLCkpCml0ZW1zPVt7InNrdSI6c2t1LCJ0aXRsZSI6dGl0bGUsInByaWNlIjpwcmljZSwiZGF0YSI6anNvbi5sb2FkcyhwYXlsb2FkKX0gZm9yIHNrdSx0aXRsZSxwcmljZSxwYXlsb2FkIGluIGN1ci5mZXRjaGFsbCgpXQpjdXIuZXhlY3V0ZSgiU0VMRUNUIGQua2luZCxkLnJlZixzdWJzdHIoZC50ZXh0LDEsNDAwKSBGUk9NIGRvY3MgZCBKT0lOIGRvY3NfZnRzIGYgT04gZC5pZD1mLnJvd2lkIFdIRVJFIGYuZG9jc19mdHMgTUFUQ0ggPyBMSU1JVCAzIiwgKHEsKSkKZG9jcz1beyJraW5kIjprLCJyZWYiOnIsInNuaXBwZXQiOnR9IGZvciBrLHIsdCBpbiBjdXIuZmV0Y2hhbGwoKV0KcHJpbnQoanNvbi5kdW1wcyh7Iml0ZW1zIjppdGVtcywiZG9jcyI6ZG9jc30sIGVuc3VyZV9hc2NpaT1GYWxzZSkpCg==",
    "report_daily": "aW1wb3J0IG9zLCBkYXRldGltZSBhcyBkdApEQiA9IG9zLmdldGVudigiREFUQUJBU0VfVVJMIikgb3Igb3MuZ2V0ZW52KCJQT1NUR1JFU19VUkwiKSBvciAicG9zdGdyZXNxbDovL3Bvc3RncmVzOnBvc3RncmVzQGRiOjU0MzIvcG9zdGdyZXMiCgpkZWYgbWFpbigpOgogICAgZDAgPSBkdC5kYXRlLnRvZGF5KCk7IGQxID0gZDAgKyBkdC50aW1lZGVsdGEoZGF5cz0xKQogICAgdmFscyA9IHsibGVhZHMiOjAsImluX2luIjowLCJvdXRfb3V0IjowLCJyZXBsaWVkIjowLCJhYl90cmlhbHMiOjAsImFiX3N1Y2MiOjB9CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHBzeWNvcGcKICAgICAgICB3aXRoIHBzeWNvcGcuY29ubmVjdChEQikgYXMgY29ubjoKICAgICAgICAgICAgY3VyID0gY29ubi5jdXJzb3IoKQogICAgICAgICAgICAjIGhlbHBlcgogICAgICAgICAgICBkZWYgdGFibGVfZXhpc3RzKG5hbWUpOgogICAgICAgICAgICAgICAgY3VyLmV4ZWN1dGUoInNlbGVjdCAxIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLnRhYmxlcyB3aGVyZSB0YWJsZV9zY2hlbWE9J3B1YmxpYycgYW5kIHRhYmxlX25hbWU9JXMiLCAobmFtZSwpKQogICAgICAgICAgICAgICAgcmV0dXJuIGN1ci5mZXRjaG9uZSgpIGlzIG5vdCBOb25lCiAgICAgICAgICAgIGRlZiBnZXRfY29scyhuYW1lKToKICAgICAgICAgICAgICAgIGN1ci5leGVjdXRlKCIiInNlbGVjdCBjb2x1bW5fbmFtZSBmcm9tIGluZm9ybWF0aW9uX3NjaGVtYS5jb2x1bW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSB0YWJsZV9zY2hlbWE9J3B1YmxpYycgYW5kIHRhYmxlX25hbWU9JXMiIiIsKG5hbWUsKSkKICAgICAgICAgICAgICAgIHJldHVybiB7clswXSBmb3IgciBpbiBjdXIuZmV0Y2hhbGwoKX0KICAgICAgICAgICAgZGVmIHBpY2soY3MsIG9wdHMpOgogICAgICAgICAgICAgICAgZm9yIGMgaW4gb3B0czoKICAgICAgICAgICAgICAgICAgICBpZiBjIGluIGNzOiByZXR1cm4gYwogICAgICAgICAgICAgICAgcmV0dXJuIE5vbmUKICAgICAgICAgICAgZGVmIGNvdW50KHNxbCwgcGFyYW1zKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBjdXIuZXhlY3V0ZShzcWwsIHBhcmFtcyk7IHggPSBjdXIuZmV0Y2hvbmUoKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnQoeFswXSkgaWYgeCBhbmQgeFswXSBpcyBub3QgTm9uZSBlbHNlIDAKICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAKCiAgICAgICAgICAgIGlmIHRhYmxlX2V4aXN0cygibWVzc2FnZXMiKToKICAgICAgICAgICAgICAgIGNvbHMgPSBnZXRfY29scygibWVzc2FnZXMiKQogICAgICAgICAgICAgICAgbGVhZCA9IHBpY2soY29scywgWyJsZWFkX2lkIiwibGVhZCIsImNvbnZlcnNhdGlvbl9pZCIsImNoYXRfaWQiXSkKICAgICAgICAgICAgICAgIHRzICAgPSBwaWNrKGNvbHMsIFsidHMiLCJjcmVhdGVkX2F0IiwiZGF0ZXRpbWUiLCJ0aW1lIiwiaW5zZXJ0ZWRfYXQiLCJkYXRlIiwiYXQiXSkKICAgICAgICAgICAgICAgIGluYyAgPSAiaW5jb21pbmciIGlmICJpbmNvbWluZyIgaW4gY29scyBlbHNlIE5vbmUKICAgICAgICAgICAgICAgIGRpcmMgPSAiZGlyZWN0aW9uIiBpZiAiZGlyZWN0aW9uIiBpbiBjb2xzIGVsc2UgTm9uZQogICAgICAgICAgICAgICAgaW5jX2V4cHIgPSBOb25lCiAgICAgICAgICAgICAgICBpZiBpbmM6ICBpbmNfZXhwciA9IGYiKHtpbmN9PXRydWUpIgogICAgICAgICAgICAgICAgZWxpZiBkaXJjOiBpbmNfZXhwciA9IGYiKGxvd2VyKGNvYWxlc2NlKHtkaXJjfSwnJykpIGluICgnaW4nLCdpbmNvbWluZycsJ2NsaWVudCcsJ2Zyb21fY2xpZW50JywncmVjZWl2ZWQnKSkiCgogICAgICAgICAgICAgICAgaWYgbGVhZCBhbmQgdHM6CiAgICAgICAgICAgICAgICAgICAgdmFsc1sibGVhZHMiXSA9IGNvdW50KGYic2VsZWN0IGNvdW50KGRpc3RpbmN0IHtsZWFkfSkgZnJvbSBtZXNzYWdlcyB3aGVyZSB7dHN9ID49ICVzIGFuZCB7dHN9IDwgJXMiLCAoZDAsZDEpKQogICAgICAgICAgICAgICAgaWYgdHMgYW5kIGluY19leHByOgogICAgICAgICAgICAgICAgICAgIHZhbHNbImluX2luIl0gICA9IGNvdW50KGYic2VsZWN0IGNvdW50KCopIGZyb20gbWVzc2FnZXMgd2hlcmUge2luY19leHByfSBhbmQge3RzfSA+PSAlcyBhbmQge3RzfSA8ICVzIiwgKGQwLGQxKSkKICAgICAgICAgICAgICAgICAgICB2YWxzWyJvdXRfb3V0Il0gPSBjb3VudChmInNlbGVjdCBjb3VudCgqKSBmcm9tIG1lc3NhZ2VzIHdoZXJlIG5vdCB7aW5jX2V4cHJ9IGFuZCB7dHN9ID49ICVzIGFuZCB7dHN9IDwgJXMiLCAoZDAsZDEpKQogICAgICAgICAgICAgICAgICAgIGlmIGxlYWQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHNbInJlcGxpZWQiXSA9IGNvdW50KGYiIiIKICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHggYXMgKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0IHtsZWFkfSBhcyBsaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heChjYXNlIHdoZW4ge2luY19leHByfSB0aGVuIDEgZWxzZSAwIGVuZCkgYXMgaGFzX2luLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXgoY2FzZSB3aGVuIG5vdCB7aW5jX2V4cHJ9IHRoZW4gMSBlbHNlIDAgZW5kKSBhcyBoYXNfb3V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIG1lc3NhZ2VzIHdoZXJlIHt0c30gPj0gJXMgYW5kIHt0c30gPCAlcyBncm91cCBieSB7bGVhZH0KICAgICAgICAgICAgICAgICAgICAgICAgICApIHNlbGVjdCBjb3VudCgqKSBmcm9tIHggd2hlcmUgaGFzX2luPTEgYW5kIGhhc19vdXQ9MQogICAgICAgICAgICAgICAgICAgICAgICAiIiIsKGQwLGQxKSkKCiAgICAgICAgICAgIGlmIHRhYmxlX2V4aXN0cygiYWJfZGVjaXNpb25zIik6CiAgICAgICAgICAgICAgICB2YWxzWyJhYl90cmlhbHMiXSA9IGNvdW50KCJzZWxlY3QgY291bnQoKikgZnJvbSBhYl9kZWNpc2lvbnMgd2hlcmUgZGVjaWRlZF9hdCA+PSAlcyBhbmQgZGVjaWRlZF9hdCA8ICVzIiwgKGQwLGQxKSkKICAgICAgICAgICAgaWYgdGFibGVfZXhpc3RzKCJhYl9vdXRjb21lcyIpOgogICAgICAgICAgICAgICAgdmFsc1siYWJfc3VjYyJdID0gY291bnQoCiAgICAgICAgICAgICAgICAgICAgInNlbGVjdCBjb2FsZXNjZShzdW0oY2FzZSB3aGVuIG91dGNvbWUgaW4gKCdjbGllbnRfcmVwbHknLCdxdWFsaWZpZWQnLCdib29rZWQnLCdwYWlkJykgdGhlbiAxIGVsc2UgMCBlbmQpLDApIGZyb20gYWJfb3V0Y29tZXMgd2hlcmUgdHMgPj0gJXMgYW5kIHRzIDwgJXMiLAogICAgICAgICAgICAgICAgICAgIChkMCxkMSkKICAgICAgICAgICAgICAgICkKICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgIyDQvdC10YIgcHN5Y29wZyDQuNC70Lgg0L3QtdGCINCR0JQg4oCUINC+0YLRh9GR0YIg0YEg0L3Rg9C70Y/QvNC4CiAgICAgICAgcGFzcwoKICAgIHJlcF9yYXRlID0gKHZhbHNbInJlcGxpZWQiXS92YWxzWyJsZWFkcyJdKjEwMCkgaWYgdmFsc1sibGVhZHMiXSBlbHNlIDAuMAogICAgYWJfY3ZyICAgPSAodmFsc1siYWJfc3VjYyJdL3ZhbHNbImFiX3RyaWFscyJdKjEwMCkgaWYgdmFsc1siYWJfdHJpYWxzIl0gZWxzZSAwLjAKICAgIG91dCA9IGYiIiIjIERhaWx5IHJlcG9ydCB7ZDB9CkxlYWRzOiB7dmFsc1snbGVhZHMnXX0KSW5jb21pbmcgbXNnczoge3ZhbHNbJ2luX2luJ119Ck91dGdvaW5nIG1zZ3M6IHt2YWxzWydvdXRfb3V0J119ClJlcGx5LXJhdGU6IHtyZXBfcmF0ZTouMWZ9JQpBL0IgdHJpYWxzOiB7dmFsc1snYWJfdHJpYWxzJ119CkEvQiBzdWNjZXNzOiB7dmFsc1snYWJfc3VjYyddfSAgKENWUiB7YWJfY3ZyOi4xZn0lKQoiIiIKICAgIG9zLm1ha2VkaXJzKCIvYXBwL3JlcG9ydHMiLCBleGlzdF9vaz1UcnVlKQogICAgcGF0aCA9IGYiL2FwcC9yZXBvcnRzL3JlcG9ydC17ZDAuc3RyZnRpbWUoJyVZJW0lZCcpfS5tZCIKICAgIHdpdGggb3BlbihwYXRoLCJ3IixlbmNvZGluZz0idXRmLTgiKSBhcyBmOiBmLndyaXRlKG91dCkKICAgIHByaW50KHBhdGgpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg==",
    "stage_advance": "aW1wb3J0IG9zLGpzb24scHN5Y29wZwoKREI9b3MuZ2V0ZW52KCJEQVRBQkFTRV9VUkwiKSBvciBvcy5nZXRlbnYoIlBPU1RHUkVTX1VSTCIpIG9yICJwb3N0Z3Jlc3FsOi8vcG9zdGdyZXM6cG9zdGdyZXNAZGI6NTQzMi9wb3N0Z3JlcyIKCmRlZiBmaXJzdChjb2xzLCBvcHRzKToKICAgIGZvciBjIGluIG9wdHM6CiAgICAgICAgaWYgYyBpbiBjb2xzOiByZXR1cm4gYwogICAgcmV0dXJuIE5vbmUKCmRlZiB0YWJsZV9leGlzdHMoY3VyLCBuYW1lKToKICAgIGN1ci5leGVjdXRlKCJTRUxFQ1QgMSBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMgV0hFUkUgdGFibGVfc2NoZW1hPSdwdWJsaWMnIEFORCB0YWJsZV9uYW1lPSVzIiwobmFtZSwpKQogICAgcmV0dXJuIGN1ci5mZXRjaG9uZSgpIGlzIG5vdCBOb25lCgpkZWYgYnVpbGRfaW5vdXRfZXhwcihjdXIsIGNvbHMpOgogICAgZm9yIG5hbWUgaW4gKCJpbmNvbWluZyIsImlzX2luY29taW5nIik6CiAgICAgICAgaWYgbmFtZSBpbiBjb2xzOiByZXR1cm4gKGYiKHtuYW1lfT10cnVlKSIsIGYiKHtuYW1lfT1mYWxzZSkiKQogICAgaWYgImZyb21fbWUiIGluIGNvbHM6IHJldHVybiAoZiIoTk9UIGZyb21fbWUpIiwgZiIoZnJvbV9tZSkiKQogICAgaWYgImRpcmVjdGlvbiIgaW4gY29sczoKICAgICAgICBjdXIuZXhlY3V0ZSgiU0VMRUNUIERJU1RJTkNUIGRpcmVjdGlvbjo6dGV4dCBGUk9NIG1lc3NhZ2VzIFdIRVJFIGRpcmVjdGlvbiBJUyBOT1QgTlVMTCBMSU1JVCAyMCIpCiAgICAgICAgdmFscz1bKHYgb3IgIiIpLnN0cmlwKCkubG93ZXIoKSBmb3IgKHYsKSBpbiBjdXIuZmV0Y2hhbGwoKV0KICAgICAgICBJTl9UWFQ9eydpbicsJ2luY29taW5nJywnY2xpZW50JywnZnJvbV9jbGllbnQnfQogICAgICAgIE9VVF9UWFQ9eydvdXQnLCdvdXRnb2luZycsJ2FnZW50JywndG9fY2xpZW50J30KICAgICAgICBpZiBhbnkodiBpbiBJTl9UWFQgZm9yIHYgaW4gdmFscykgb3IgYW55KHYgaW4gT1VUX1RYVCBmb3IgdiBpbiB2YWxzKToKICAgICAgICAgICAgaW5jX2xpc3Q9IiwiLmpvaW4oWyInaW4nIiwiJ2luY29taW5nJyIsIidjbGllbnQnIiwiJ2Zyb21fY2xpZW50JyJdKQogICAgICAgICAgICBvdXRfbGlzdD0iLCIuam9pbihbIidvdXQnIiwiJ291dGdvaW5nJyIsIidhZ2VudCciLCIndG9fY2xpZW50JyJdKQogICAgICAgICAgICByZXR1cm4gKGYiKGxvd2VyKGRpcmVjdGlvbjo6dGV4dCkgSU4gKHtpbmNfbGlzdH0pKSIsCiAgICAgICAgICAgICAgICAgICAgZiIobG93ZXIoZGlyZWN0aW9uOjp0ZXh0KSBJTiAoe291dF9saXN0fSkpIikKICAgICAgICBudW1zPVtdCiAgICAgICAgZm9yIHYgaW4gdmFsczoKICAgICAgICAgICAgdHJ5OiBudW1zLmFwcGVuZChpbnQodikpCiAgICAgICAgICAgIGV4Y2VwdDogcGFzcwogICAgICAgIG51bXM9c29ydGVkKHNldChudW1zKSkKICAgICAgICBpZiBsZW4obnVtcyk+PTI6IAogICAgICAgICAgICByZXR1cm4gKGYiKGRpcmVjdGlvbiBJTiAoe251bXNbMF19KSkiLCBmIihkaXJlY3Rpb24gSU4gKHtudW1zWy0xXX0pKSIpCiAgICAgICAgZWxpZiBsZW4obnVtcyk9PTE6CiAgICAgICAgICAgIG49bnVtc1swXTsgcmV0dXJuIChmIihkaXJlY3Rpb24gSU4gKHtufSkpIiwgZiIoTk9UIChkaXJlY3Rpb24gSU4gKHtufSkpKSIpCiAgICByZXR1cm4gKCIodHJ1ZSkiLCIoZmFsc2UpIikKCndpdGggcHN5Y29wZy5jb25uZWN0KERCKSBhcyBjb25uOgogICAgY29ubi5hdXRvY29tbWl0PVRydWUKICAgIGN1cj1jb25uLmN1cnNvcigpCiAgICBjdXIuZXhlY3V0ZSgiU0VMRUNUIGNvbHVtbl9uYW1lIEZST00gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgV0hFUkUgdGFibGVfc2NoZW1hPSdwdWJsaWMnIEFORCB0YWJsZV9uYW1lPSdtZXNzYWdlcyciKQogICAgbWNvbHM9e3JbMF0gZm9yIHIgaW4gY3VyLmZldGNoYWxsKCl9CiAgICBpZiBub3QgbWNvbHM6IHByaW50KGpzb24uZHVtcHMoeyJvayI6RmFsc2UsInJlYXNvbiI6Im5vIG1lc3NhZ2VzIHRhYmxlIn0pKTsgcmFpc2UgU3lzdGVtRXhpdAoKICAgIGxlYWRfY29sID0gZmlyc3QobWNvbHMsIFsibGVhZF9pZCIsImxlYWQiLCJjb252ZXJzYXRpb25faWQiLCJjaGF0X2lkIl0pCiAgICB0c19jb2wgICA9IGZpcnN0KG1jb2xzLCBbInRzIiwiY3JlYXRlZF9hdCIsImluc2VydGVkX2F0IiwiZGF0ZXRpbWUiLCJ0aW1lIiwiZGF0ZSIsImF0Il0pCiAgICBpZiBub3QgKGxlYWRfY29sIGFuZCB0c19jb2wpOgogICAgICAgIHByaW50KGpzb24uZHVtcHMoeyJvayI6RmFsc2UsInJlYXNvbiI6Im1lc3NhZ2VzIGNvbHVtbnMgbWlzc2luZyIsImhhdmUiOmxpc3QobWNvbHMpfSkpOyByYWlzZSBTeXN0ZW1FeGl0CgogICAgaW5jX2V4cHIsIG91dF9leHByID0gYnVpbGRfaW5vdXRfZXhwcihjdXIsIG1jb2xzKQoKICAgIGhhc190YWdzICA9IHRhYmxlX2V4aXN0cyhjdXIsImxlYWRfdGFncyIpCiAgICBoYXNfc3RhdGUgPSB0YWJsZV9leGlzdHMoY3VyLCJsZWFkX3N0YXRlIikKICAgIGhhc19oaXN0ICA9IHRhYmxlX2V4aXN0cyhjdXIsImxlYWRfc3RhdGVfaGlzdG9yeSIpCiAgICBoYXNfYWIgICAgPSB0YWJsZV9leGlzdHMoY3VyLCJhYl9vdXRjb21lcyIpCgogICAgY3VyLmV4ZWN1dGUoZiJTRUxFQ1QgRElTVElOQ1Qge2xlYWRfY29sfSBGUk9NIG1lc3NhZ2VzIFdIRVJFIHt0c19jb2x9ID4gTk9XKCkgLSBJTlRFUlZBTCAnMzAgZGF5cyciKQogICAgbGVhZHM9W3JbMF0gZm9yIHIgaW4gY3VyLmZldGNoYWxsKCldCgogICAgZm9yIGxlYWQgaW4gbGVhZHM6CiAgICAgICAgc3RhdGU9Im5ldyIKICAgICAgICBpZiBoYXNfc3RhdGU6CiAgICAgICAgICAgIGN1ci5leGVjdXRlKCJTRUxFQ1Qgc3RhdGUgRlJPTSBsZWFkX3N0YXRlIFdIRVJFIGxlYWRfaWQ9JXMiLChsZWFkLCkpCiAgICAgICAgICAgIHJvdz1jdXIuZmV0Y2hvbmUoKQogICAgICAgICAgICBpZiByb3c6IHN0YXRlPXJvd1swXQoKICAgICAgICB0YWdzPXt9CiAgICAgICAgaWYgaGFzX3RhZ3M6CiAgICAgICAgICAgIGN1ci5leGVjdXRlKCJTRUxFQ1QgdGFnLHZhbHVlIEZST00gbGVhZF90YWdzIFdIRVJFIGxlYWRfaWQ9JXMiLChsZWFkLCkpCiAgICAgICAgICAgIHRhZ3M9ZGljdChjdXIuZmV0Y2hhbGwoKSkgaWYgY3VyLnJvd2NvdW50IGVsc2Uge30KCiAgICAgICAgZGVmIHNldF9zdGF0ZShjdXJfc3RhdGUsIHRvX3N0YXRlLCByZWFzb24sIHBheWxvYWQ9Tm9uZSk6CiAgICAgICAgICAgIGlmIG5vdCBoYXNfc3RhdGU6IHJldHVybiBjdXJfc3RhdGUKICAgICAgICAgICAgY3VyLmV4ZWN1dGUoIlNFTEVDVCBzdGF0ZSBGUk9NIGxlYWRfc3RhdGUgV0hFUkUgbGVhZF9pZD0lcyIsKGxlYWQsKSkKICAgICAgICAgICAgcm93PWN1ci5mZXRjaG9uZSgpCiAgICAgICAgICAgIGZyb21fc3RhdGU9cm93WzBdIGlmIHJvdyBlbHNlIE5vbmUKICAgICAgICAgICAgaWYgcm93OgogICAgICAgICAgICAgICAgY3VyLmV4ZWN1dGUoIlVQREFURSBsZWFkX3N0YXRlIFNFVCBzdGF0ZT0lcywgdXBkYXRlZF9hdD1OT1coKSBXSEVSRSBsZWFkX2lkPSVzIiwodG9fc3RhdGUsbGVhZCkpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBjdXIuZXhlY3V0ZSgiSU5TRVJUIElOVE8gbGVhZF9zdGF0ZShsZWFkX2lkLHN0YXRlKSBWQUxVRVMoJXMsJXMpIiwobGVhZCx0b19zdGF0ZSkpCiAgICAgICAgICAgIGlmIGhhc19oaXN0OgogICAgICAgICAgICAgICAgY3VyLmV4ZWN1dGUoIklOU0VSVCBJTlRPIGxlYWRfc3RhdGVfaGlzdG9yeShsZWFkX2lkLGZyb21fc3RhdGUsdG9fc3RhdGUscmVhc29uLHBheWxvYWQpIFZBTFVFUyglcywlcywlcywlcywlcykiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxlYWQsZnJvbV9zdGF0ZSx0b19zdGF0ZSxyZWFzb24sanNvbi5kdW1wcyhwYXlsb2FkIG9yIHt9KSkpCiAgICAgICAgICAgIGlmIGhhc19hYiBhbmQgdG9fc3RhdGUgaW4gKCJxdWFsaWZpZWQiLCJib29rZWQiLCJ3b24iKToKICAgICAgICAgICAgICAgIGN1ci5leGVjdXRlKCIiIgogICAgICAgICAgICAgICAgICBJTlNFUlQgSU5UTyBhYl9vdXRjb21lcyhsZWFkX2lkLGFybSxvdXRjb21lKQogICAgICAgICAgICAgICAgICBWQUxVRVMoCiAgICAgICAgICAgICAgICAgICAgJXMsIAogICAgICAgICAgICAgICAgICAgIENPQUxFU0NFKChTRUxFQ1QgdmFsdWUgRlJPTSBsZWFkX3RhZ3MgV0hFUkUgbGVhZF9pZD0lcyBBTkQgdGFnPSdhYl9hcm0nIE9SREVSIEJZIGlkIERFU0MgTElNSVQgMSksJ2Z1X2EnKSwKICAgICAgICAgICAgICAgICAgICAlcwogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAiIiIsKGxlYWQsbGVhZCwicXVhbGlmaWVkIiBpZiB0b19zdGF0ZT09InF1YWxpZmllZCIgZWxzZSAiYm9va2VkIiBpZiB0b19zdGF0ZT09ImJvb2tlZCIgZWxzZSAicGFpZCIpKQogICAgICAgICAgICByZXR1cm4gdG9fc3RhdGUKCiAgICAgICAgIyDQv9C10YDQtdGF0L7QtNGLCiAgICAgICAgaWYgc3RhdGU9PSJuZXciOgogICAgICAgICAgICBjdXIuZXhlY3V0ZShmIlNFTEVDVCAxIEZST00gbWVzc2FnZXMgV0hFUkUge2xlYWRfY29sfT0lcyBBTkQge291dF9leHByfSBMSU1JVCAxIiwobGVhZCwpKQogICAgICAgICAgICBpZiBjdXIuZmV0Y2hvbmUoKToKICAgICAgICAgICAgICAgIHN0YXRlID0gc2V0X3N0YXRlKHN0YXRlLCJlbmdhZ2VkIiwiZmlyc3Rfb3V0Z29pbmciKQoKICAgICAgICBpZiBzdGF0ZSBpbiAoIm5ldyIsImVuZ2FnZWQiKToKICAgICAgICAgICAgaWYgYW55KGsgaW4gdGFncyBmb3IgayBpbiAoImludGVudCIsInByaWNlIiwiZGltZW5zaW9uIiwiY2l0eSIpKToKICAgICAgICAgICAgICAgIHN0YXRlID0gc2V0X3N0YXRlKHN0YXRlLCJxdWFsaWZpZWQiLCJzaWduYWxzX3ByZXNlbnQiLHsidGFncyI6dGFnc30pCgogICAgICAgIGlmIHN0YXRlIGluICgicXVhbGlmaWVkIiwicHJvcG9zYWwiKToKICAgICAgICAgICAgaWYgKCJhZGRyZXNzIiBpbiB0YWdzKSBhbmQgKCJwaG9uZSIgaW4gdGFncyk6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IHNldF9zdGF0ZShzdGF0ZSwiYm9va2VkIiwiYWRkcmVzc19waG9uZV9yZWFkeSIseyJ0YWdzIjp0YWdzfSkKCiAgICAgICAgaWYgc3RhdGUgbm90IGluICgid29uIiwiYm9va2VkIik6CiAgICAgICAgICAgIGlmIHRhZ3MuZ2V0KCJyaXNrIik9PSJvYmplY3Rpb24iOgogICAgICAgICAgICAgICAgc3RhdGUgPSBzZXRfc3RhdGUoc3RhdGUsImxvc3QiLCJvYmplY3Rpb25fcmVjZW50IikKCiAgICBwcmludChqc29uLmR1bXBzKHsib2siOlRydWUsImxlYWRzIjpsZW4obGVhZHMpfSkpCg==",
    "tag_qualify": "aW1wb3J0IG9zLHJlLGpzb24scHN5Y29wZwoKREI9b3MuZ2V0ZW52KCJEQVRBQkFTRV9VUkwiKSBvciBvcy5nZXRlbnYoIlBPU1RHUkVTX1VSTCIpIG9yICJwb3N0Z3Jlc3FsOi8vcG9zdGdyZXM6cG9zdGdyZXNAZGI6NTQzMi9wb3N0Z3JlcyIKClBfUFJJQ0U9cmUuY29tcGlsZShyJyhcZFtcZFwgXC4sXXsyLH0pKD86XHMq0YDRg9CxfFxzKnJ1Ynxccyrigr0pPycscmUuSSkKUF9USU1FTElORT1yZS5jb21waWxlKHInXGIo0YHQtdCz0L7QtNC90Y980LfQsNCy0YLRgNCwfNC/0L7RgdC70LXQt9Cw0LLRgtGA0LB80L3QsCDQstGL0YXQvtC00L3Ri9GFfNGB0YDQvtGH0L3QvnzRgdC10LPQvtC00L3RjyDQttC1fNC30LDQstGC0YDQsCDQttC1KVxiJyxyZS5JKQpQX0RJTT1yZS5jb21waWxlKHInKFxkezIsM31ccz9beNGFw5ddXHM/XGR7MiwzfSkoPzpccz/RgdC8KT8nLHJlLkkpClBfQUREUj1yZS5jb21waWxlKHInKNGD0LtcLnzRg9C70LjRhtCwfNC/0YDQvtGB0L/QtdC60YJ80L/RgC3RgnzQtFwuXHM/XGQrfNC60L7RgNC/XC580LrQslwuXHM/XGQrfNC/0L7QtNGK0LXQt9C0fNGN0YLQsNC2fNC+0YTQuNGBKScscmUuSSkKUF9JTlRFTlQ9cmUuY29tcGlsZShyJ1xiKNC60YPQv9C40YLRjHzQt9Cw0LrQsNC30LDRgtGMfNC+0YTQvtGA0LzQuNGC0Yx80LHQtdGA0YN80LPQvtGC0L7QsiDQvtC/0LvQsNGC0LjRgtGMfNC90YPQttC90L580L3QsNC00L580YXQvtGH0YMpXGInLHJlLkkpClBfTkVHPXJlLmNvbXBpbGUocidcYijQtNC+0YDQvtCz0L580L/QvtC00YPQvNCw0Y580L/QvtC60LAg0L3QtSDQvdGD0LbQvdC+fNC90LUg0LjQvdGC0LXRgNC10YHQvdC+fNC90LXQsNC60YLRg9Cw0LvRjNC90L4pXGInLHJlLkkpClBfQ0lUWT1yZS5jb21waWxlKHInXGIo0YPRhNCwfNGB0YLQtdGA0LvQuNGC0LDQvNCw0Lp80YHQsNC70LDQstCw0YJ80LzQvtGB0LrQstCwfNGB0L/QsXzRgdCw0L3QutGCWy0gXdC/0LXRgtC10YDQsdGD0YDQs3zQutCw0LfQsNC90YwpXGInLHJlLkkpClBfUEhPTkU9cmUuY29tcGlsZShyJyhcKz9cZFtcZFwtXHNcKFwpXXs4LH1cZCknKQoKZGVmIGZpcnN0KGNvbHMsIG9wdHMpOgogICAgZm9yIGMgaW4gb3B0czoKICAgICAgICBpZiBjIGluIGNvbHM6IHJldHVybiBjCiAgICByZXR1cm4gTm9uZQoKZGVmIGJ1aWxkX2lub3V0X2V4cHIoY3VyLCBjb2xzKToKICAgICMgMSkgYm9vbGVhbiBpbmNvbWluZyAvIGlzX2luY29taW5nCiAgICBmb3IgbmFtZSBpbiAoImluY29taW5nIiwiaXNfaW5jb21pbmciKToKICAgICAgICBpZiBuYW1lIGluIGNvbHM6CiAgICAgICAgICAgIHJldHVybiAoZiIoe25hbWV9PXRydWUpIiwgZiIoe25hbWV9PWZhbHNlKSIpCiAgICAjIDIpIGZyb21fbWUKICAgIGlmICJmcm9tX21lIiBpbiBjb2xzOgogICAgICAgIHJldHVybiAoZiIoTk9UIGZyb21fbWUpIiwgZiIoZnJvbV9tZSkiKQogICAgIyAzKSBkaXJlY3Rpb24gKNGC0LXQutGB0YIv0YfQuNGB0LvQvikKICAgIGlmICJkaXJlY3Rpb24iIGluIGNvbHM6CiAgICAgICAgY3VyLmV4ZWN1dGUoIlNFTEVDVCBESVNUSU5DVCBkaXJlY3Rpb246OnRleHQgRlJPTSBtZXNzYWdlcyBXSEVSRSBkaXJlY3Rpb24gSVMgTk9UIE5VTEwgTElNSVQgMjAiKQogICAgICAgIHZhbHM9Wyh2IG9yICIiKS5zdHJpcCgpIGZvciAodiwpIGluIGN1ci5mZXRjaGFsbCgpXQogICAgICAgIGxvd3M9W3YubG93ZXIoKSBmb3IgdiBpbiB2YWxzXQogICAgICAgIElOX1RYVD17J2luJywnaW5jb21pbmcnLCdjbGllbnQnLCdmcm9tX2NsaWVudCd9CiAgICAgICAgT1VUX1RYVD17J291dCcsJ291dGdvaW5nJywnYWdlbnQnLCd0b19jbGllbnQnfQogICAgICAgIGlmIGFueSh2IGluIElOX1RYVCBmb3IgdiBpbiBsb3dzKSBvciBhbnkodiBpbiBPVVRfVFhUIGZvciB2IGluIGxvd3MpOgogICAgICAgICAgICBpbmNfbGlzdD0iLCIuam9pbihbIidpbiciLCInaW5jb21pbmcnIiwiJ2NsaWVudCciLCInZnJvbV9jbGllbnQnIl0pCiAgICAgICAgICAgIG91dF9saXN0PSIsIi5qb2luKFsiJ291dCciLCInb3V0Z29pbmcnIiwiJ2FnZW50JyIsIid0b19jbGllbnQnIl0pCiAgICAgICAgICAgIHJldHVybiAoZiIobG93ZXIoZGlyZWN0aW9uOjp0ZXh0KSBJTiAoe2luY19saXN0fSkpIiwKICAgICAgICAgICAgICAgICAgICBmIihsb3dlcihkaXJlY3Rpb246OnRleHQpIElOICh7b3V0X2xpc3R9KSkiKQogICAgICAgICMgbnVtZXJpYyBmYWxsYmFjawogICAgICAgIG51bXM9W10KICAgICAgICBmb3IgdiBpbiBsb3dzOgogICAgICAgICAgICB0cnk6IG51bXMuYXBwZW5kKGludCh2KSkKICAgICAgICAgICAgZXhjZXB0OiBwYXNzCiAgICAgICAgbnVtcz1zb3J0ZWQoc2V0KG51bXMpKQogICAgICAgIGlmIGxlbihudW1zKT49MjoKICAgICAgICAgICAgaW5jX3ZhbHM9IiwiLmpvaW4oc3RyKG51bXNbMF0pKQogICAgICAgICAgICBvdXRfdmFscz0iLCIuam9pbihzdHIobnVtc1stMV0pKQogICAgICAgICAgICByZXR1cm4gKGYiKGRpcmVjdGlvbiBJTiAoe2luY192YWxzfSkpIiwgZiIoZGlyZWN0aW9uIElOICh7b3V0X3ZhbHN9KSkiKQogICAgICAgIGVsaWYgbGVuKG51bXMpPT0xOgogICAgICAgICAgICBuPW51bXNbMF0KICAgICAgICAgICAgcmV0dXJuIChmIihkaXJlY3Rpb24gSU4gKHtufSkpIiwgZiIoTk9UIChkaXJlY3Rpb24gSU4gKHtufSkpKSIpCiAgICAjIDQpIGZhbGxiYWNrCiAgICByZXR1cm4gKCIodHJ1ZSkiLCIoZmFsc2UpIikKCmRlZiBpbnNlcnRfdGFnKGN1ciwgbGVhZF9pZCwgdGFnLCB2YWx1ZSk6CiAgICBjdXIuZXhlY3V0ZSgiIiIKICAgICAgSU5TRVJUIElOVE8gbGVhZF90YWdzKGxlYWRfaWQsdGFnLHZhbHVlKQogICAgICBTRUxFQ1QgJXMsJXMsJXMKICAgICAgV0hFUkUgTk9UIEVYSVNUUyAoCiAgICAgICAgU0VMRUNUIDEgRlJPTSBsZWFkX3RhZ3MgCiAgICAgICAgV0hFUkUgbGVhZF9pZD0lcyBBTkQgdGFnPSVzIEFORCBDT0FMRVNDRSh2YWx1ZSwnJyk9Q09BTEVTQ0UoJXMsJycpCiAgICAgICkKICAgICIiIiwgKGxlYWRfaWQsIHRhZywgdmFsdWUsIGxlYWRfaWQsIHRhZywgdmFsdWUpKQoKd2l0aCBwc3ljb3BnLmNvbm5lY3QoREIpIGFzIGNvbm46CiAgICBjb25uLmF1dG9jb21taXQ9VHJ1ZQogICAgY3VyPWNvbm4uY3Vyc29yKCkKICAgIGN1ci5leGVjdXRlKCJTRUxFQ1QgY29sdW1uX25hbWUgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEuY29sdW1ucyBXSEVSRSB0YWJsZV9zY2hlbWE9J3B1YmxpYycgQU5EIHRhYmxlX25hbWU9J21lc3NhZ2VzJyIpCiAgICBtY29scz17clswXSBmb3IgciBpbiBjdXIuZmV0Y2hhbGwoKX0KICAgIGlmIG5vdCBtY29sczogcHJpbnQoanNvbi5kdW1wcyh7Im9rIjpGYWxzZSwicmVhc29uIjoibm8gbWVzc2FnZXMgdGFibGUifSkpOyByYWlzZSBTeXN0ZW1FeGl0CgogICAgbGVhZF9jb2wgPSBmaXJzdChtY29scywgWyJsZWFkX2lkIiwibGVhZCIsImNvbnZlcnNhdGlvbl9pZCIsImNoYXRfaWQiXSkKICAgIHRzX2NvbCAgID0gZmlyc3QobWNvbHMsIFsidHMiLCJjcmVhdGVkX2F0IiwiaW5zZXJ0ZWRfYXQiLCJkYXRldGltZSIsInRpbWUiLCJkYXRlIiwiYXQiXSkKICAgIHR4dF9jb2wgID0gZmlyc3QobWNvbHMsIFsidGV4dCIsImJvZHkiLCJtZXNzYWdlIiwiY29udGVudCIsInBheWxvYWQiXSkKICAgIGlmIG5vdCAobGVhZF9jb2wgYW5kIHRzX2NvbCBhbmQgdHh0X2NvbCk6CiAgICAgICAgcHJpbnQoanNvbi5kdW1wcyh7Im9rIjpGYWxzZSwicmVhc29uIjoibWVzc2FnZXMgY29sdW1ucyBtaXNzaW5nIiwiaGF2ZSI6bGlzdChtY29scyl9KSk7IHJhaXNlIFN5c3RlbUV4aXQKCiAgICBpbmNfZXhwciwgXyA9IGJ1aWxkX2lub3V0X2V4cHIoY3VyLCBtY29scykKCiAgICBxID0gZiIiIgogICAgICBXSVRIIGxhc3QgQVMgKAogICAgICAgIFNFTEVDVCB7bGVhZF9jb2x9IEFTIGxlYWRfaWQsIE1BWCh7dHNfY29sfSkgQVMgbWF4X3RzCiAgICAgICAgRlJPTSBtZXNzYWdlcwogICAgICAgIFdIRVJFIHtpbmNfZXhwcn0KICAgICAgICBHUk9VUCBCWSB7bGVhZF9jb2x9CiAgICAgICkKICAgICAgU0VMRUNUIG0ue2xlYWRfY29sfSBBUyBsZWFkX2lkLCBDT0FMRVNDRShtLnt0eHRfY29sfSwnJykgQVMgdGV4dAogICAgICBGUk9NIG1lc3NhZ2VzIG0gCiAgICAgIEpPSU4gbGFzdCB0IE9OIHQubGVhZF9pZD1tLntsZWFkX2NvbH0gQU5EIG0ue3RzX2NvbH09dC5tYXhfdHMKICAgICAgV0hFUkUgQ09BTEVTQ0UobS57dHh0X2NvbH0sJycpIDw+ICcnCiAgICAgIExJTUlUIDIwMDAKICAgICIiIgogICAgY3VyLmV4ZWN1dGUocSkKICAgIHJvd3M9Y3VyLmZldGNoYWxsKCkKCiAgICBmb3IgbGVhZF9pZCwgdGV4dCBpbiByb3dzOgogICAgICAgIHQ9dGV4dC5zdHJpcCgpCiAgICAgICAgaWYgbm90IHQ6IAogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGlmIFBfSU5URU5ULnNlYXJjaCh0KTogaW5zZXJ0X3RhZyhjdXIsbGVhZF9pZCwiaW50ZW50IiwiYnV5IikKICAgICAgICBpZiBQX05FRy5zZWFyY2godCk6ICAgaW5zZXJ0X3RhZyhjdXIsbGVhZF9pZCwicmlzayIsIm9iamVjdGlvbiIpCiAgICAgICAgaWYgUF9QUklDRS5zZWFyY2godCk6IGluc2VydF90YWcoY3VyLGxlYWRfaWQsInByaWNlIiwibWVudGlvbmVkIikKICAgICAgICBpZiBQX0RJTS5zZWFyY2godCk6ICAgaW5zZXJ0X3RhZyhjdXIsbGVhZF9pZCwiZGltZW5zaW9uIiwibWVudGlvbmVkIikKICAgICAgICBpZiBQX0FERFIuc2VhcmNoKHQpOiAgaW5zZXJ0X3RhZyhjdXIsbGVhZF9pZCwiYWRkcmVzcyIsIm1lbnRpb25lZCIpCiAgICAgICAgaWYgUF9USU1FTElORS5zZWFyY2godCk6IGluc2VydF90YWcoY3VyLGxlYWRfaWQsInRpbWVsaW5lIiwidXJnZW50IikKICAgICAgICBpZiBQX0NJVFkuc2VhcmNoKHQpOiAgaW5zZXJ0X3RhZyhjdXIsbGVhZF9pZCwiY2l0eSIsIm1lbnRpb25lZCIpCiAgICAgICAgaWYgUF9QSE9ORS5zZWFyY2godCk6IGluc2VydF90YWcoY3VyLGxlYWRfaWQsInBob25lIiwibWVudGlvbmVkIikKCnByaW50KGpzb24uZHVtcHMoeyJvayI6VHJ1ZSwicHJvY2Vzc2VkIjpsZW4ocm93cyl9KSkK",
}
ALIASES = {
    "catalog_cols": "_catalog_cols",
    "schema_detect": "_schema_detect",
}


def _decode(name): return base64.b64decode(SOURCES[name]).decode("utf-8","ignore")

def _preload_helpers():
    pkg = types.ModuleType("scripts"); pkg.__path__=[]
    sys.modules.setdefault("scripts", pkg)
    for name in SOURCES:
        if not name.startswith("_"): continue
        mod = types.ModuleType(name); mod.__file__=f"/virtual/{name}.py"
        sys.modules[name]=mod; sys.modules[f"scripts.{name}"]=mod; setattr(pkg, name, mod)
        exec(compile(_decode(name), mod.__file__, "exec"), mod.__dict__)

def run(cmd, argv):
    target = ALIASES.get(cmd, cmd)
    if target not in SOURCES:
        raise SystemExit(f"unknown cmd: {cmd}")
    _preload_helpers()
    mname=f"scripts.{target}"
    sys.modules[mname]=types.ModuleType(mname)
    sys.modules[mname].__file__=f"/virtual/{target}.py"
    src=_decode(target)
    ns={"__name__":"__main__","__file__":sys.modules[mname].__file__}
    sys.argv=[ns["__file__"]]+argv
    exec(compile(src, ns["__file__"], "exec"), ns)

def main():
    choices=sorted(set(list(SOURCES.keys())+list(ALIASES.keys())))
    p=argparse.ArgumentParser(prog="cli")
    p.add_argument("cmd", choices=choices)
    p.add_argument("rest", nargs=argparse.REMAINDER)
    a=p.parse_args()
    run(a.cmd, a.rest)

if __name__ == "__main__":
    main()
