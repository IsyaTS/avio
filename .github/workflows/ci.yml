name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt pytest ruff==0.5.5 flake8
      - name: Ruff lint
        run: |
          ruff check \
            --select E,F \
            --ignore E402,E501 \
            tgworker \
            tests \
            app/web/public.py \
            app/tests/conftest.py \
            app/tests/test_main_webhook.py \
            app/tests/test_public_tg.py
      - name: Flake8 lint
        run: |
          flake8 \
            --select=E,F \
            --extend-ignore=E501 \
            tgworker \
            tests \
            app/web/public.py \
            app/tests/conftest.py \
            app/tests/test_main_webhook.py \
            app/tests/test_public_tg.py
      - name: Pytest
        run: pytest -q

  build-image:
    runs-on: ubuntu-latest
    needs: lint-test
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Build app image
        run: docker build --target app -t avio/app:ci .

  compose-smoke:
    runs-on: ubuntu-latest
    needs: build-image
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Prepare environment file
        run: |
          cat <<'ENV' > .env
          ADMIN_TOKEN=test-admin
          PUBLIC_KEY=
          TELEGRAM_API_ID=0
          TELEGRAM_API_HASH=
          POSTGRES_PASSWORD=postgres
          ENV
      - name: Build app image
        run: docker build --target app -t avio/app:ci .
      - name: Start services
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d app mocktg redis
      - name: Wait for app health
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/health > /dev/null; then
              exit 0
            fi
            sleep 2
          done
          echo "App health check failed" >&2
          docker compose logs app
          exit 1
      - name: Smoke test public start
        run: curl -fsS -H "X-Admin-Token: test-admin" "http://localhost:8000/pub/tg/start?tenant=1"
      - name: Smoke test twofa submit
        run: |
          curl -fsS -H "Content-Type: application/json" -H "X-Admin-Token: test-admin" \
            -d '{"password":"demo"}' http://localhost:8000/pub/tg/password?tenant=1
      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v
