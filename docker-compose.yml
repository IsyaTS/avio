services:
  redis:
    image: redis:7-alpine
    command: ["redis-server","--appendonly","yes"]
    volumes: [ "redis-data:/data" ]
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    image: avio/app:local
    env_file: .env
    environment:
      TENANTS_DIR: /app/tenants
      TG_SESSIONS_DIR: /app/tg-sessions
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://avio:AvioPg_2025_strong@postgres:5432/avio}
      TG_WORKER_URL: http://tgworker:9000
      TGWORKER_BASE_URL: http://tgworker:9000
      WA_ENABLED: "false"
      PUBLIC_KEY: ${PUBLIC_KEY}
      ADMIN_TOKEN: ${ADMIN_TOKEN}
      OUTBOX_ENABLED: ${OUTBOX_ENABLED:-false}
      TENANT: ${TENANT:-1}
      PYTHONPATH: /app
    depends_on: [redis, postgres]
    working_dir: /app
    command: ["uvicorn","app.main:app","--host","0.0.0.0","--port","8000"]
    restart: unless-stopped

    volumes:
      - ./data:/data
      - ./data/tenants:/app/tenants
      - ./tg-sessions:/app/tg-sessions:ro
    ports:
    - "0.0.0.0:8000:8000"
  worker:
    image: avio/app:local
    env_file: .env
    environment:
      TENANTS_DIR: /app/tenants
      PYTHONPATH: /app
      TG_WORKER_URL: http://tgworker:9000
      TGWORKER_BASE_URL: http://tgworker:9000
      TG_SESSIONS_DIR: /app/tg-sessions
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      DATABASE_URL: ${DATABASE_URL:-postgresql+asyncpg://avio:AvioPg_2025_strong@postgres:5432/avio}
      ADMIN_TOKEN: ${ADMIN_TOKEN}
      OUTBOX_ENABLED: ${OUTBOX_ENABLED:-false}
      OUTBOX_WHITELIST: ${OUTBOX_WHITELIST:-}
      APP_BASE_URL: ${APP_BASE_URL:-http://app:8000}
      TENANT: ${TENANT:-1}
    depends_on:
      app:
        condition: service_started
      redis:
        condition: service_started
      postgres:
        condition: service_started
    working_dir: /app
    command: ["python","-m","app.worker"]
    restart: on-failure
    healthcheck:
      test: [
        "CMD-SHELL",
        "python -c 'import socket; socket.create_connection((\"redis\", 6379), 5)'",
      ]
      interval: 30s
      timeout: 5s
      retries: 3

    volumes:
      - ./data:/data
      - ./data/tenants:/app/tenants
      - ./tg-sessions:/app/tg-sessions:rw
  waweb:
    build: ./waweb
    env_file: .env
    environment:
      - PORT=9001
      - TENANT_DEFAULT=${TENANT_DEFAULT:-1}
      - APP_WEBHOOK=http://app:8000/webhook/provider
    restart: unless-stopped

  pushgateway:
    image: prom/pushgateway:latest
    ports: ["127.0.0.1:9091:9091"]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command: ["--config.file=/etc/prometheus/prometheus.yml"]
    depends_on: [pushgateway]
    ports: ["127.0.0.1:9090:9090"]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on: [prometheus]
    ports: ["127.0.0.1:3000:3000"]
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on: [redis]
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    privileged: true
    ports: ["127.0.0.1:18081:8080"]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  ops:
    build:
      context: .
      dockerfile: ops/Dockerfile
    env_file: .env
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - OPS_USER=${OPS_USER:-admin}
      - OPS_PASS=${OPS_PASS:-admin}
      - PYTHONPATH=/app
    working_dir: /app
    depends_on: [redis, postgres]
    ports: ["127.0.0.1:18080:8000"]
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD-SHELL",
        "alembic -c ops/alembic.ini current | grep -q '(head)'"
      ]
      interval: 30s
      timeout: 5s
      retries: 3

  metrics:
    image: avio/app:local
    env_file: .env
    environment:
      - TENANTS_DIR=/app/tenants
    depends_on: [app, pushgateway]
    command: sh -lc 'while :; do python /app/scripts/metrics_push.py || true; sleep 60; done'
    restart: unless-stopped

    volumes:
      - ./data:/data
      - ./data/tenants:/app/tenants
      - ./tg-sessions:/app/tg-sessions:ro
  tgworker:
    image: avio/app:local
    env_file: .env
    environment:
      - TG_SESSIONS_DIR=/app/tg-sessions
      - TENANT_DEFAULT=${TENANT_DEFAULT:-1}
      - APP_WEBHOOK=http://app:8000/webhook/provider
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_QR_TTL=${TELEGRAM_QR_TTL:-120}
      - TELEGRAM_QR_POLL_INTERVAL=${TELEGRAM_QR_POLL_INTERVAL:-1s}
      - PUBLIC_KEY=${PUBLIC_KEY}
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - APP_BASE_URL=http://app:8000
      - APP_INTERNAL_URL=http://app:8000
      - TENANT=${TENANT:-1}
      - PYTHONPATH=/app
      - TG_DEVICE_MODEL=${TG_DEVICE_MODEL:-Avio tgworker}
      - TG_SYSTEM_VERSION=${TG_SYSTEM_VERSION:-1.0}
      - TG_APP_VERSION=${TG_APP_VERSION:-1.0}
      - TG_LANG=ru
      - TZ=Europe/Moscow
    depends_on: [app, redis]
    working_dir: /app
    command: ["uvicorn","tgworker.api:create_app","--host","0.0.0.0","--port","9000"]
    restart: unless-stopped
    expose: ["9000"]
    healthcheck:
      test: ["CMD-SHELL","curl -f http://127.0.0.1:9000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - ./tg-sessions:/app/tg-sessions:rw
  diagnostics:
    image: avio/app:local
    env_file: .env
    environment:
      - AVIO_URL=http://app:8000
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - TENANTS_DIR=/app/tenants
    depends_on:
      app:
        condition: service_started
    command:
      - bash
      - -lc
      - "exec /app/scripts/diag.sh \"$$@\""
    restart: "no"
    volumes:
      - ./data:/data
      - ./data/tenants:/app/tenants
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflare-tunnel
    entrypoint: ["cloudflared","--no-autoupdate"]
    command: ["tunnel","run","--token","${CF_TOKEN}"]
    env_file: [ .env ]
    depends_on:
      app:
        condition: service_started
    restart: unless-stopped

volumes:
  pg-data:
  redis-data:
